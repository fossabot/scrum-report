// Package web Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/index.html
// templates/report.html
package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6f\x6f\xdb\xbc\x11\x7f\xef\x4f\x71\xd3\x83\x22\x49\x61\x59\x4e\xd0\x14\x81\x22\x79\x4b\xd3\x76\xed\x8b\xa2\xc5\x52\xa0\xd8\x86\x61\xa0\xc4\x93\x4d\x84\x22\x35\xf2\x14\x5b\x29\xfa\xdd\x07\x92\xb2\x2d\x39\x69\x96\x0e\x18\xb0\xc7\x79\x11\xf3\xf8\xbb\x3f\xfc\xf1\x78\x77\xce\xfe\xf0\xf6\xf3\xf5\xd7\xbf\x7e\x79\x07\x2b\xaa\xe5\x62\x92\xb9\x7f\x20\x99\x5a\xe6\x11\xaa\xc8\x09\x90\xf1\xc5\x04\x00\x20\xab\x91\x18\x94\x2b\x66\x2c\x52\x1e\xb5\x54\xc5\x17\x11\x24\xc3\x4d\xc5\x6a\xcc\xa3\x3b\x81\xeb\x46\x1b\x8a\xa0\xd4\x8a\x50\x51\x1e\xad\x05\xa7\x55\xce\xf1\x4e\x94\x18\xfb\xc5\x14\x84\x12\x24\x98\x8c\x6d\xc9\x24\xe6\xa7\x91\x33\x94\x59\xea\x24\x06\x93\x00\x85\xe6\x1d\x7c\xef\x17\xee\x53\x69\x45\x71\xc5\x6a\x21\xbb\x14\xae\x8c\x60\x72\x0a\x1f\x50\xde\x21\x89\x92\x4d\xc1\x32\x65\x63\x8b\x46\x54\x97\xbd\xd2\x8f\xc9\xa4\xff\x96\xbc\x84\xf7\xad\x94\xc1\x39\x08\xd5\xb4\x04\x95\x40\xc9\x2d\xbc\x4c\x7a\x0c\xe1\x86\x98\x41\xf6\x77\xea\x1a\xcc\xdd\xea\x1f\x23\xf7\x5e\x37\x85\xd3\xf9\xfc\xc5\xe5\x40\xdc\x30\xce\x85\x5a\xa6\x70\x7a\xd6\x6c\xe0\x6c\xde\x6c\x86\xbb\x35\x33\x4b\xa1\x52\xb8\x68\x36\x30\x1f\x6e\x70\x61\x1b\xc9\xba\x14\x84\x92\x42\x61\x5c\x48\x5d\xde\x0e\x01\x85\x36\x1c\x4d\x0a\xa7\xcd\x06\xac\x96\x82\xc3\x6f\x65\x59\x8e\x11\x9b\xd8\x8a\x7b\xef\x3c\xa0\xe3\x42\x6f\x06\x87\xdf\x9d\xfd\x06\x09\x18\x78\x76\xa1\xd2\x06\x98\x94\x50\xb4\x44\x5a\x0d\xce\x1f\x04\xa3\x23\x17\xac\xbc\x5d\x1a\xdd\x2a\x1e\x97\x5a\x6a\x93\xc2\x6f\xaf\xae\xaf\xde\x9f\x8f\x4e\xd2\xef\xac\x57\x82\xf0\x71\x62\x5e\xfd\x0a\x31\xdb\x73\x2b\xad\x46\xe6\xca\xd6\x58\xe7\xa7\xd1\x42\x11\x9a\xcb\xa7\x6f\x66\x77\xfa\x70\xaa\x74\xa5\xef\xd0\x8c\xce\xa6\x1b\x56\x0a\xea\x52\x98\xcf\x2e\x1e\xe3\xec\xeb\x0a\xe1\x93\xe6\x4c\xc2\xf1\x9e\x86\x93\x3d\x5d\xb3\xda\x6f\x7e\x7f\xec\x4e\x7d\xec\xce\xc8\x07\xc1\x39\x2a\x28\x3a\xe0\x58\xb1\x56\xd2\x5e\xdf\x53\xa4\xad\x20\xa1\x55\x0a\x95\xd8\x20\xf7\x2a\x37\xc4\x3a\x10\x0a\x1a\xc9\x4a\x1c\xc3\xef\x63\xa1\x38\x6e\x52\x38\x0d\x48\x41\xa0\x15\x90\x6e\xc6\x30\x89\x15\xa5\x63\x52\x49\x37\x07\x92\x21\x67\xdb\xe7\x11\x84\x63\x63\x2b\x14\xcb\x15\x1d\x02\x83\x74\x8c\x74\x0c\x57\x52\xaf\x53\x60\x2d\x69\x8f\x7d\xa7\x58\x21\x11\x6c\x69\xb4\x94\x20\x2a\x50\x88\x1c\xf9\x58\xef\x61\x92\x99\x65\x71\x3c\x9f\xce\xa7\xf3\x93\xe0\x91\x49\xe9\x40\x21\xd3\x9e\xa1\xcc\x82\xf6\x74\x3e\x7b\x15\x2c\xbc\x91\x4e\x7d\x9d\x6c\x2f\xfd\xe0\x16\x42\xa2\xc6\x9e\xa4\xd7\x83\x3c\x1d\xa6\x43\x48\x85\xeb\x50\xd2\x92\x37\x7a\x73\x98\x09\x71\x5f\xee\xfe\xd3\x03\xaa\xd0\xfd\x3d\xf6\x14\xce\x5f\x78\xe6\xe0\xb4\xff\xe2\x43\x3f\x7f\x01\x95\xd1\x35\xd0\x0a\xdd\x2d\x4e\xfd\xee\x4e\x52\x68\x22\x5d\x03\x53\x1c\x4a\x74\xcf\xe2\x01\xb9\x0f\xab\xc8\xc5\xc5\xc5\x23\x89\x70\xde\x5f\xef\xb5\x6e\x25\x87\x02\xa1\xd6\x06\x41\x1b\x90\x68\xed\x14\x38\x36\xa8\x1c\x4b\x2e\xe3\x6c\x69\x10\x15\x58\x71\x3f\x48\xd0\x21\x59\x57\x9c\xc3\xdf\xb4\xae\xe1\x4a\x89\x9a\xb9\x0c\x1f\xb0\xc5\xbc\x0c\x47\x3c\xc5\x6b\x2c\x6e\x05\xc5\x6c\x8b\x4f\xa1\x87\xdd\x3b\x33\xf3\xd9\x6b\x3b\x8c\xf9\x09\xd8\x61\x34\x7f\xda\x9a\xbe\xc5\xae\x32\xac\x46\x3b\x52\x19\xf5\x17\xc7\xea\xf7\x2d\x9e\x0c\x53\xb6\xd2\xa6\x4e\xc1\xf7\xa8\xe3\xf9\xc9\x8f\xd1\x8b\x7a\x02\x7a\xba\x83\xee\xe3\x78\xae\xff\x67\xf8\x7d\xd2\x1f\x40\x96\xf4\x7d\x34\xf4\x66\x12\x24\x71\xf1\xd1\x55\x0e\x68\xd8\x12\xb3\x24\x48\x26\x59\x12\xda\x7b\xe6\x3a\xed\x62\x92\x71\x71\x07\xc0\xa4\x58\xaa\x3c\x0a\xd9\xe4\x47\x80\xb3\xc5\x5b\x26\x64\x07\x9f\x10\x49\xa8\x65\x96\xac\xce\x9c\x4e\xe8\x16\x5a\x95\x52\x94\xb7\x79\xc4\x75\xd9\xd6\xa8\x68\xb6\x44\x7a\x27\xd1\x7d\x7d\xd3\x7d\xe4\xc7\x47\x82\xff\xd3\xa0\x1b\x08\x8e\x4e\x66\x3e\xae\x59\x5f\x26\xf3\x23\xdf\xf3\x8e\xa2\xdd\xe9\xfc\x76\x3f\x2e\xa4\xbe\xe0\x44\xbd\xef\x9b\xd2\xb4\xb5\x2b\x8d\xd4\xda\x2c\x09\xbe\xdd\x01\xb8\xb8\xeb\x03\x17\x3c\x8f\x76\xae\x22\x28\x25\xb3\x36\x8f\xfc\xcb\x8c\xfa\x21\xc5\xc1\x86\xf2\xdd\x8b\xed\x2f\x24\x5a\xec\x22\x19\x62\x8d\x5e\x0f\x76\x0e\x77\x4b\x2d\xe3\x9a\xc7\xaf\x0f\x20\x1e\xe6\xae\x08\x58\xe9\x12\x35\x8f\x92\x6d\x68\x35\xd2\x4a\xf3\x3c\xfa\xf2\xf9\xe6\x6b\xf4\x40\x29\x7c\xb4\xb2\x6d\x51\x0b\xca\x23\x83\xd4\x1a\xe5\x66\xa9\x4a\x98\xfa\xf8\xe8\xad\x86\x4e\xb7\x60\x90\x49\xd9\xc1\x9a\x29\x72\x29\x51\x1a\x74\x4f\x8a\x41\x70\x02\x6b\x41\x2b\x57\x20\x2c\x02\x47\x62\x42\xda\x3f\x1e\x9d\x5c\x3e\x12\xe3\xe1\x71\x5c\xc8\xb1\xab\x58\xcd\x4f\xc0\x5e\x41\xb2\x02\xa5\x9b\x24\x3c\xe7\x1d\x5a\x42\xc3\x59\x17\xc1\xe2\xdb\x8a\x11\x70\xc1\x61\x27\x4c\x21\x4b\x3c\xfe\x09\x7b\xdb\xd1\x6b\x7b\x8b\x03\x8b\x7e\x18\x8b\x1c\x20\x1a\xc5\xe8\xee\xce\x68\x19\xf5\x53\xe7\x5e\xe3\xa7\x5e\xf6\x1f\x83\xff\x6a\x85\x41\xbe\xc8\x92\xad\xe7\x9f\x30\x13\x12\xec\x7f\x41\x1a\x69\x17\x6c\xe0\xab\x91\xcc\xb5\x71\xe0\x1a\xbc\x38\xfd\x75\xc6\x82\xb9\xe7\xb2\x15\xd0\xbf\x13\xa6\x44\xdd\x20\x17\xae\xa0\xd8\x68\xf1\x71\xbf\xf8\x2f\x58\x1a\x9a\x7a\x2e\x57\x43\x9d\xff\x5b\xc6\xfa\x6a\xdc\xeb\x14\xa4\xa0\x20\x15\x73\xa6\x96\x68\xb6\x27\x0d\x15\x25\x1a\x57\x59\x3f\x67\x44\x8b\xeb\x50\x3f\xfe\xe2\xab\xc7\xbe\xc0\xfe\x42\xdc\x59\xe2\x22\x3d\xa8\x93\x63\xe8\x60\xb9\xad\xdc\xfd\x3f\x5b\x1a\xd1\x50\xd8\x4a\x12\xf8\x33\x92\x9f\x6e\x7c\x95\xf6\x42\x89\x14\x56\x90\xc3\x73\x3a\xcd\xe5\x64\x6b\xeb\xdb\x0a\x95\x37\xd6\x5a\x34\xe0\x9b\x95\xeb\xc0\xdd\x7a\x85\x6e\xbe\x69\xc9\x0a\x8e\xa0\xab\xbd\xc3\x29\x94\x52\x5b\x04\x41\xde\xc6\x5a\x28\xae\xd7\xb3\xbe\xd1\x41\x0e\x55\xab\x7c\x49\x3f\xc6\x3b\x54\x74\x32\x68\xe1\xa2\x82\x20\x9c\x11\x33\x4b\x24\xc8\xf3\x3c\xd8\x3c\x19\x35\x7a\x08\xc2\x71\x3b\x84\x1c\x22\xf7\xbb\x21\xda\x0f\x3a\xa1\xa9\xff\x98\x64\xc9\x96\xa0\x2c\xe9\x7b\x75\x12\x7e\xb1\xff\x3b\x00\x00\xff\xff\x12\x26\xcd\xf0\xc2\x0f\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 4034, mode: os.FileMode(420), modTime: time.Unix(1555283787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReportHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\xa6\xda\x5d\x20\x09\xac\x48\x5e\x24\x0b\x43\x91\x8c\x66\xd3\x5d\x6c\x0f\xfd\x41\x37\x97\x6d\xd1\x03\x25\x8e\x6c\x22\x14\x29\x90\xe3\xbf\x18\x06\xfa\x2c\x7d\xb4\x3e\x49\x41\x51\x8e\x25\x25\xcd\x66\x81\xca\x07\x53\xc3\x99\xe1\xc7\x6f\x3e\x6a\x98\x7e\xf7\xc3\x2f\x37\xb7\x5f\x7e\xfd\x00\x0b\xaa\xe4\x6c\x94\xba\x3f\x90\x4c\xcd\xb3\x00\x55\xe0\x0c\xc8\xf8\x6c\x04\x00\x90\x56\x48\x0c\x8a\x05\x33\x16\x29\x0b\x96\x54\x86\xd3\x00\xa2\xde\xa4\x56\x84\x8a\xb2\x60\x2d\x38\x2d\x32\x8e\x2b\x51\x60\xd8\xbc\x8c\x41\x28\x41\x82\xc9\xd0\x16\x4c\x62\x36\x09\x40\xb1\x0a\xb3\x60\x25\x70\x5d\x6b\x43\x81\xcf\x94\x5a\xda\x4a\xf4\x49\x01\x20\xd7\x7c\x0b\xbb\xc3\x9b\x7b\x4a\xad\x28\x2c\x59\x25\xe4\x36\x81\x6b\x23\x98\x1c\xc3\x27\x94\x2b\x24\x51\xb0\x31\x58\xa6\x6c\x68\xd1\x88\xf2\xea\x10\xb5\x1f\x8d\x0e\xc3\xe8\x0c\x3e\x2e\xa5\xf4\x90\x40\xa8\x7a\x49\x50\x0a\x94\xdc\xc2\x59\x74\x70\x22\xdc\x10\x33\xc8\xfe\xa0\x6d\x8d\x99\x7b\xfb\xb3\x0f\xa1\x89\x4e\x60\x12\xc7\x6f\xae\xba\xf6\x9a\x71\x2e\xd4\x3c\x81\xc9\xdb\x7a\x03\x6f\xe3\x7a\xd3\x9b\xae\x98\x99\x0b\x95\xc0\xb4\xde\x40\xdc\x9b\xe1\xc2\xd6\x92\x6d\x13\x10\x4a\x0a\x85\x61\x2e\x75\x71\xd7\xf3\xc8\xb5\xe1\x68\x12\x98\xd4\x1b\xb0\x5a\x0a\x0e\xaf\x8a\xa2\x18\xb8\x6c\x42\x2b\xee\x1b\x00\xde\x3d\xcc\xf5\xa6\xcb\xc2\x91\x84\xcf\x48\xc0\xa0\xa1\x1a\x4a\x6d\x80\x49\x09\xf9\x92\x48\xab\x2e\x11\xde\xd2\xdf\x7b\xce\x8a\xbb\xb9\xd1\x4b\xc5\xc3\x42\x4b\x6d\x12\x78\x75\x71\x73\xfd\xf1\xb2\xbf\xa1\x76\x6a\xbd\x10\x84\xff\x41\xd1\xc5\xb7\x51\x74\x20\x40\x69\xd5\xcf\x58\x2c\x8d\x75\x6b\xd5\x5a\x28\x42\x73\xf5\xb5\x42\x1d\x79\xf0\xdb\x4b\x16\x7a\x85\xa6\xbf\x49\x5d\xb3\x42\xd0\x36\x81\xf8\x7c\xfa\x34\x81\xb7\x0b\x84\x9f\x34\x67\x12\x4e\x8e\x8c\x9c\x76\xb8\x3b\xaf\x9a\xd9\xdd\x93\x65\x6e\x36\xe1\xd2\x7c\x12\x9c\xa3\x82\x7c\x0b\x1c\x4b\xb6\x94\xd4\xc9\xd0\xd0\xa5\xad\x20\xa1\x55\x02\xa5\xd8\x20\x6f\x62\x3e\x13\xdb\x82\x50\x50\x4b\x56\xe0\xc0\xff\x3e\x14\x8a\xe3\x26\x81\x89\x77\x15\x04\x5a\x01\xe9\x7a\xe0\x27\xb1\xa4\x64\xc0\x30\xe9\x7a\x68\xea\xf2\x77\x38\x3b\xde\x38\xc8\xb7\x40\x31\x5f\xd0\xd0\xd3\x5b\x07\xae\x8e\xed\x52\xea\x75\x02\x6c\x49\xba\x71\xfe\xa0\x58\x2e\x11\x6c\x61\xb4\x94\x20\x4a\x50\x88\x1c\xf9\x20\xf0\xb1\xf2\xcc\x3c\x3f\x89\xc7\xf1\x38\x3e\xf5\x6b\x32\x29\x9d\x93\x57\xdf\x4b\xa2\x99\x0f\x1f\xc7\xe7\x17\x3e\xc5\x7b\xe9\xe2\xd7\xd1\x41\x01\xc3\x72\x78\xf5\x86\x0d\x55\xef\xba\xe2\xed\x89\xc3\x0b\xe3\xc6\x7f\x0c\xa3\xf7\x7a\xf3\x48\x17\x61\xfb\xa5\xfc\xea\xd9\x2a\xd1\xfd\x9e\x3c\x23\x97\x6f\x1a\x06\x61\xd2\x0e\x9a\x0d\x5c\xbe\x81\xd2\xe8\x0a\x68\x81\xae\xa0\xe3\x66\xf6\xc1\x92\x6b\x22\x5d\x01\x53\x1c\x0a\x74\xa7\xe5\x31\xc9\x8f\xbf\x33\xd3\xe9\xf4\x29\x51\x5c\xb6\x95\xbe\xd1\x4b\xc9\x21\x47\xa8\xb4\x41\xd0\x06\x24\x5a\x3b\x06\x8e\x35\x2a\x47\x96\x13\xa0\x2d\x0c\xa2\x02\x2b\xee\xbb\x82\xed\x71\x76\xcd\x39\xfc\xae\x75\x05\xd7\x4a\x54\xcc\x69\xbe\x4b\x1a\x6b\x8c\xd8\xa7\x2b\x5c\x63\x7e\x27\x28\x64\x87\x88\x04\x5a\xbf\x7b\x97\x28\x3e\x7f\x67\x7b\xc0\x9f\xf1\x7b\x0c\xe9\xfb\x43\xf6\x3b\xdc\x96\x86\x55\x68\x7b\x41\xfd\x96\xe4\xf8\xdd\x1d\x02\xc8\x30\x65\x4b\x6d\xaa\x04\x9a\x56\x77\x12\x9f\xee\xfb\xe7\xec\x19\xdf\xc9\xd1\xb7\x83\xe5\xc5\x18\x5e\xb2\xf6\xf3\x6b\xba\x16\x1c\x75\x7a\x70\x4a\x82\x24\xce\x7e\x43\xd7\xa3\xa1\x66\x73\x4c\x23\x6f\x1a\xa5\x91\xbf\x1c\x8c\x52\xd7\xa5\x67\xa3\x94\x8b\x95\x53\xe7\x1d\xd7\x6b\x95\x05\x93\xa0\xcd\xc0\x0c\x89\x42\x22\x08\x9e\x05\xa6\xc9\x13\x3c\xf4\x77\x48\xeb\xd9\xd9\x17\xb4\x84\x86\xb3\xed\x59\x1a\xd5\xb3\x51\x77\xee\x61\xbc\xdb\x19\xa6\xe6\x08\xaf\x19\x24\x19\x9c\x3f\x84\xec\x8f\x34\x35\xcf\x3f\x7f\xfd\x0d\xbb\xdd\x6b\xb6\xdf\xa7\xb9\xe9\x86\xa3\xe2\xfb\x23\x17\x7e\xa1\x51\x6f\xad\xb3\x5b\xfd\x3c\x86\x27\x70\x34\x21\x43\x0c\xcf\xe0\x78\x31\x96\x1f\xab\x1a\xb9\xa8\x50\x91\xfd\x36\x44\x9d\xc0\xff\x07\x97\x1f\xb6\x45\x74\x55\xe7\x62\xe5\x8b\xdd\xd6\xd7\x69\x09\x58\xe1\x4e\x56\x16\x44\xdd\xda\xb6\x17\x88\x42\x32\x6b\xb3\x20\x27\x05\x39\xa9\x90\x3b\xb8\x26\x80\xe6\x7a\x15\xd8\x65\x5e\x09\x0a\xfc\x65\xa4\xbd\x39\x26\x4d\x1f\x09\xfa\xf0\x7e\xc6\x35\x78\xf9\xa4\x91\x4f\xdc\xae\x1f\x39\x00\x47\x60\x51\xab\xc6\xa8\xb9\xd2\xfe\x1b\x00\x00\xff\xff\x68\xd5\x66\x5a\xe2\x0a\x00\x00")

func templatesReportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesReportHtml,
		"templates/report.html",
	)
}

func templatesReportHtml() (*asset, error) {
	bytes, err := templatesReportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/report.html", size: 2786, mode: os.FileMode(420), modTime: time.Unix(1555284365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":  templatesIndexHtml,
	"templates/report.html": templatesReportHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"index.html":  {templatesIndexHtml, map[string]*bintree{}},
		"report.html": {templatesReportHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
