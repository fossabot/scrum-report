// Package web Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/index.html
// templates/report.html
package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6f\x6f\xdb\xbc\x11\x7f\xef\x4f\x71\xd3\x83\x22\x49\x61\x59\x4e\xd0\x14\x81\x22\x79\x4b\xd3\x76\xed\x8b\xa2\xc5\x52\xa0\xd8\x86\x61\xa0\xc4\x93\x4d\x84\x22\x35\xf2\x14\x5b\x29\xfa\xdd\x07\x92\xb2\x2d\x39\x69\x96\x0e\x18\xb0\xc7\x79\x11\xf3\xf8\xbb\x3f\xfc\xf1\x78\x77\xce\xfe\xf0\xf6\xf3\xf5\xd7\xbf\x7e\x79\x07\x2b\xaa\xe5\x62\x92\xb9\x7f\x20\x99\x5a\xe6\x11\xaa\xc8\x09\x90\xf1\xc5\x04\x00\x20\xab\x91\x18\x94\x2b\x66\x2c\x52\x1e\xb5\x54\xc5\x17\x11\x24\xc3\x4d\xc5\x6a\xcc\xa3\x3b\x81\xeb\x46\x1b\x8a\xa0\xd4\x8a\x50\x51\x1e\xad\x05\xa7\x55\xce\xf1\x4e\x94\x18\xfb\xc5\x14\x84\x12\x24\x98\x8c\x6d\xc9\x24\xe6\xa7\x91\x33\x94\x59\xea\x24\x06\x93\x00\x85\xe6\x1d\x7c\xef\x17\xee\x53\x69\x45\x71\xc5\x6a\x21\xbb\x14\xae\x8c\x60\x72\x0a\x1f\x50\xde\x21\x89\x92\x4d\xc1\x32\x65\x63\x8b\x46\x54\x97\xbd\xd2\x8f\xc9\xa4\xff\x96\xbc\x84\xf7\xad\x94\xc1\x39\x08\xd5\xb4\x04\x95\x40\xc9\x2d\xbc\x4c\x7a\x0c\xe1\x86\x98\x41\xf6\x77\xea\x1a\xcc\xdd\xea\x1f\x23\xf7\x5e\x37\x85\xd3\xf9\xfc\xc5\xe5\x40\xdc\x30\xce\x85\x5a\xa6\x70\x7a\xd6\x6c\xe0\x6c\xde\x6c\x86\xbb\x35\x33\x4b\xa1\x52\xb8\x68\x36\x30\x1f\x6e\x70\x61\x1b\xc9\xba\x14\x84\x92\x42\x61\x5c\x48\x5d\xde\x0e\x01\x85\x36\x1c\x4d\x0a\xa7\xcd\x06\xac\x96\x82\xc3\x6f\x65\x59\x8e\x11\x9b\xd8\x8a\x7b\xef\x3c\xa0\xe3\x42\x6f\x06\x87\xdf\x9d\xfd\x06\x09\x18\x78\x76\xa1\xd2\x06\x98\x94\x50\xb4\x44\x5a\x0d\xce\x1f\x04\xa3\x23\x17\xac\xbc\x5d\x1a\xdd\x2a\x1e\x97\x5a\x6a\x93\xc2\x6f\xaf\xae\xaf\xde\x9f\x8f\x4e\xd2\xef\xac\x57\x82\xf0\x71\x62\x5e\xfd\x0a\x31\xdb\x73\x2b\xad\x46\xe6\xca\xd6\x58\xe7\xa7\xd1\x42\x11\x9a\xcb\xa7\x6f\x66\x77\xfa\x70\xaa\x74\xa5\xef\xd0\x8c\xce\xa6\x1b\x56\x0a\xea\x52\x98\xcf\x2e\x1e\xe3\xec\xeb\x0a\xe1\x93\xe6\x4c\xc2\xf1\x9e\x86\x93\x3d\x5d\xb3\xda\x6f\x7e\x7f\xec\x4e\x7d\xec\xce\xc8\x07\xc1\x39\x2a\x28\x3a\xe0\x58\xb1\x56\xd2\x5e\xdf\x53\xa4\xad\x20\xa1\x55\x0a\x95\xd8\x20\xf7\x2a\x37\xc4\x3a\x10\x0a\x1a\xc9\x4a\x1c\xc3\xef\x63\xa1\x38\x6e\x52\x38\x0d\x48\x41\xa0\x15\x90\x6e\xc6\x30\x89\x15\xa5\x63\x52\x49\x37\x07\x92\x21\x67\xdb\xe7\x11\x84\x63\x63\x2b\x14\xcb\x15\x1d\x02\x83\x74\x8c\x74\x0c\x57\x52\xaf\x53\x60\x2d\x69\x8f\x7d\xa7\x58\x21\x11\x6c\x69\xb4\x94\x20\x2a\x50\x88\x1c\xf9\x58\xef\x61\x92\x99\x65\x71\x3c\x9f\xce\xa7\xf3\x93\xe0\x91\x49\xe9\x40\x21\xd3\x9e\xa1\xcc\x82\xf6\x74\x3e\x7b\x15\x2c\xbc\x91\x4e\x7d\x9d\x6c\x2f\xfd\xe0\x16\x42\xa2\xc6\x9e\xa4\xd7\x83\x3c\x1d\xa6\x43\x48\x85\xeb\x50\xd2\x92\x37\x7a\x73\x98\x09\x71\x5f\xee\xfe\xd3\x03\xaa\xd0\xfd\x3d\xf6\x14\xce\x5f\x78\xe6\xe0\xb4\xff\xe2\x43\x3f\x7f\x01\x95\xd1\x35\xd0\x0a\xdd\x2d\x4e\xfd\xee\x4e\x52\x68\x22\x5d\x03\x53\x1c\x4a\x74\xcf\xe2\x01\xb9\x0f\xab\xc8\xc5\xc5\xc5\x23\x89\x70\xde\x5f\xef\xb5\x6e\x25\x87\x02\xa1\xd6\x06\x41\x1b\x90\x68\xed\x14\x38\x36\xa8\x1c\x4b\x2e\xe3\x6c\x69\x10\x15\x58\x71\x3f\x48\xd0\x21\x59\x57\x9c\xc3\xdf\xb4\xae\xe1\x4a\x89\x9a\xb9\x0c\x1f\xb0\xc5\xbc\x0c\x47\x3c\xc5\x6b\x2c\x6e\x05\xc5\x6c\x8b\x4f\xa1\x87\xdd\x3b\x33\xf3\xd9\x6b\x3b\x8c\xf9\x09\xd8\x61\x34\x7f\xda\x9a\xbe\xc5\xae\x32\xac\x46\x3b\x52\x19\xf5\x17\xc7\xea\xf7\x2d\x9e\x0c\x53\xb6\xd2\xa6\x4e\xc1\xf7\xa8\xe3\xf9\xc9\x8f\xd1\x8b\x7a\x02\x7a\xba\x83\xee\xe3\x78\xae\xff\x67\xf8\x7d\xd2\x1f\x40\x96\xf4\x7d\x34\xf4\x66\x12\x24\x71\xf1\xd1\x55\x0e\x68\xd8\x12\xb3\x24\x48\x26\x59\x12\xda\x7b\xe6\x3a\xed\x62\x92\x71\x71\x07\xc0\xa4\x58\xaa\x3c\x0a\xd9\xe4\x47\x80\xb3\xc5\x5b\x26\x64\x07\x9f\x10\x49\xa8\x65\x96\xac\xce\x9c\x4e\xe8\x16\x5a\x95\x52\x94\xb7\x79\xc4\x75\xd9\xd6\xa8\x68\xb6\x44\x7a\x27\xd1\x7d\x7d\xd3\x7d\xe4\xc7\x47\x82\xff\xd3\xa0\x1b\x08\x8e\x4e\x66\x3e\xae\x59\x5f\x26\xf3\x23\xdf\xf3\x8e\xa2\xdd\xe9\xfc\x76\x3f\x2e\xa4\xbe\xe0\x44\xbd\xef\x9b\xd2\xb4\xb5\x2b\x8d\xd4\xda\x2c\x09\xbe\xdd\x01\xb8\xb8\xeb\x03\x17\x3c\x8f\x76\xae\x22\x28\x25\xb3\x36\x8f\xfc\xcb\x8c\xfa\x21\xc5\xc1\x86\xf2\xdd\x8b\xed\x2f\x24\x5a\xec\x22\x19\x62\x8d\x5e\x0f\x76\x0e\x77\x4b\x2d\xe3\x9a\xc7\xaf\x0f\x20\x1e\xe6\xae\x08\x58\xe9\x12\x35\x8f\x92\x6d\x68\x35\xd2\x4a\xf3\x3c\xfa\xf2\xf9\xe6\x6b\xf4\x40\x29\x7c\xb4\xb2\x6d\x51\x0b\xca\x23\x83\xd4\x1a\xe5\x66\xa9\x4a\x98\xfa\xf8\xe8\xad\x86\x4e\xb7\x60\x90\x49\xd9\xc1\x9a\x29\x72\x29\x51\x1a\x74\x4f\x8a\x41\x70\x02\x6b\x41\x2b\x57\x20\x2c\x02\x47\x62\x42\xda\x3f\x1e\x9d\x5c\x3e\x12\xe3\xe1\x71\x5c\xc8\xb1\xab\x58\xcd\x4f\xc0\x5e\x41\xb2\x02\xa5\x9b\x24\x3c\xe7\x1d\x5a\x42\xc3\x59\x17\xc1\xe2\xdb\x8a\x11\x70\xc1\x61\x27\x4c\x21\x4b\x3c\xfe\x09\x7b\xdb\xd1\x6b\x7b\x8b\x03\x8b\x7e\x18\x8b\x1c\x20\x1a\xc5\xe8\xee\xce\x68\x19\xf5\x53\xe7\x5e\xe3\xa7\x5e\xf6\x1f\x83\xff\x6a\x85\x41\xbe\xc8\x92\xad\xe7\x9f\x30\x13\x12\xec\x7f\x41\x1a\x69\x17\x6c\xe0\xab\x91\xcc\xb5\x71\xe0\x1a\xbc\x38\xfd\x75\xc6\x82\xb9\xe7\xb2\x15\xd0\xbf\x13\xa6\x44\xdd\x20\x17\xae\xa0\xd8\x68\xf1\x71\xbf\xf8\x2f\x58\x1a\x9a\x7a\x2e\x57\x43\x9d\xff\x5b\xc6\xfa\x6a\xdc\xeb\x14\xa4\xa0\x20\x15\x73\xa6\x96\x68\xb6\x27\x0d\x15\x25\x1a\x57\x59\x3f\x67\x44\x8b\xeb\x50\x3f\xfe\xe2\xab\xc7\xbe\xc0\xfe\x42\xdc\x59\xe2\x22\x3d\xa8\x93\x63\xe8\x60\xb9\xad\xdc\xfd\x3f\x5b\x1a\xd1\x50\xd8\x4a\x12\xf8\x33\x92\x9f\x6e\x7c\x95\xf6\x42\x89\x14\x56\x90\xc3\x73\x3a\xcd\xe5\x64\x6b\xeb\xdb\x0a\x95\x37\xd6\x5a\x34\xe0\x9b\x95\xeb\xc0\xdd\x7a\x85\x6e\xbe\x69\xc9\x0a\x8e\xa0\xab\xbd\xc3\x29\x94\x52\x5b\x04\x41\xde\xc6\x5a\x28\xae\xd7\xb3\xbe\xd1\x41\x0e\x55\xab\x7c\x49\x3f\xc6\x3b\x54\x74\x32\x68\xe1\xa2\x82\x20\x9c\x11\x33\x4b\x24\xc8\xf3\x3c\xd8\x3c\x19\x35\x7a\x08\xc2\x71\x3b\x84\x1c\x22\xf7\xbb\x21\xda\x0f\x3a\xa1\xa9\xff\x98\x64\xc9\x96\xa0\x2c\xe9\x7b\x75\x12\x7e\xb1\xff\x3b\x00\x00\xff\xff\x12\x26\xcd\xf0\xc2\x0f\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 4034, mode: os.FileMode(420), modTime: time.Unix(1555283787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReportHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x8e\xe3\x44\x10\xbe\xfb\x29\x8a\xde\x45\x82\x68\xbc\x4e\x56\x8b\x34\xf2\xd8\x11\xab\x85\x15\x5c\x00\xc1\x5e\x56\x88\x43\xd9\x5d\x49\x4a\x69\x77\x5b\xdd\x95\x1f\x6f\x14\x89\x67\xe1\xd1\x78\x12\xe4\x9f\x4c\xec\xd1\x32\xcc\x48\xf8\xe2\xee\xfa\xfd\xfa\xab\xae\xea\xec\x8b\xef\x7e\x7e\xf7\xe1\xe3\x2f\xdf\xc3\x46\x2a\xb3\x8c\xb2\xf6\x07\x06\xed\x3a\x57\x64\x55\x2b\x20\xd4\xcb\x08\x00\x20\xab\x48\x10\xca\x0d\xfa\x40\x92\xab\x9d\xac\xe2\x5b\x05\xc9\x44\xe9\xac\x90\x95\x5c\x1d\x58\xcb\x26\xd7\xb4\xe7\x92\xe2\x6e\x73\x03\x6c\x59\x18\x4d\x1c\x4a\x34\x94\x2f\x14\x58\xac\x28\x57\x7b\xa6\x43\xed\xbc\xa8\x3e\x52\x16\xa4\x31\xd4\x07\x05\x80\xc2\xe9\x06\x4e\x97\x5d\xfb\xad\x9c\x95\x78\x85\x15\x9b\x26\x85\xb7\x9e\xd1\xdc\xc0\x0f\x64\xf6\x24\x5c\xe2\x0d\x04\xb4\x21\x0e\xe4\x79\x75\x77\xf1\x3a\x47\xd1\x65\x99\xcc\xe0\xfd\xce\x98\x1e\x12\xb0\xad\x77\x02\x2b\x26\xa3\x03\xcc\x92\x8b\x91\xd0\x51\xd0\x13\xfe\x2e\x4d\x4d\x79\xbb\xfb\x63\x0a\xa1\xf3\x4e\x61\x31\x9f\x7f\x79\x37\x96\xd7\xa8\x35\xdb\x75\x0a\x8b\xd7\xf5\x11\x5e\xcf\xeb\xe3\x44\x5d\xa1\x5f\xb3\x4d\xe1\xb6\x3e\xc2\x7c\xa2\xd1\x1c\x6a\x83\x4d\x0a\x6c\x0d\x5b\x8a\x0b\xe3\xca\xed\xc4\xa2\x70\x5e\x93\x4f\x61\x51\x1f\x21\x38\xc3\x1a\x5e\x94\x65\xf9\xc0\xe4\x18\x07\xfe\xd4\x01\xe8\xcd\xe3\xc2\x1d\xc7\x2c\x5c\x49\xf8\x8d\x04\x10\x3a\xaa\x61\xe5\x3c\xa0\x31\x50\xec\x44\x9c\x1d\x13\xd1\x4b\xa6\x67\x2f\xb0\xdc\xae\xbd\xdb\x59\x1d\x97\xce\x38\x9f\xc2\x8b\x37\xef\xde\xbe\xff\x66\x7a\xa0\x41\x75\xd8\xb0\xd0\xbf\x50\xf4\xe6\x79\x14\x5d\x08\xb0\xce\x4e\x23\x96\x3b\x1f\xda\x5c\xb5\x63\x2b\xe4\xef\xfe\xab\x50\x57\x1e\xfa\xe3\xa5\x1b\xb7\x27\x3f\x3d\xa4\xab\xb1\x64\x69\x52\x98\xbf\xba\xfd\x8c\xe3\xb7\xf1\x81\x8a\x2d\x4b\xbc\xa5\x66\xe5\xb1\xa2\x00\x68\xb9\x42\xa1\x4f\xce\x55\x0f\xae\xab\x6f\x25\x17\x07\xf1\x68\xc3\xca\xf9\x2a\x85\xae\x0d\xbe\x9a\x7f\x7d\x1e\x5b\x8b\x7b\xc4\x76\x71\xb5\x1d\x61\x79\x32\x86\xa7\xe4\x7e\x3c\x67\xdb\x9e\xc9\xa8\x3f\x33\x61\x31\xb4\xfc\x95\xda\xfe\x85\x1a\xd7\x94\x25\xbd\x28\xca\x92\x7e\x70\x44\x59\xdb\xc1\xcb\x28\xd3\xbc\x6f\xab\xbb\xd5\xee\x60\x73\xb5\x50\x43\x04\xf4\xc2\xa5\x21\x60\x9d\x2b\xdf\xc5\x51\xf7\xbd\x0f\x59\xbd\x9c\x7d\xa4\x20\xe4\x35\x36\xb3\x2c\xa9\x97\xd1\x58\x77\xbf\x3e\x9d\x3c\xda\x35\xc1\x4b\x84\x34\x87\x57\xf7\x2e\xe7\x2b\x4d\xdd\xf7\xf7\x9f\x7f\xc1\xe9\xf4\x12\xcf\xe7\xac\xf0\x63\x77\xb2\xfa\x7c\xe5\xa2\x4f\x14\x4d\x72\xcd\x3e\xb8\xc7\x31\x7c\x06\x47\xe7\xf2\x10\xc3\x23\x38\x9e\x8c\xe5\xc7\xaa\x26\xcd\x15\x59\x09\xcf\x43\x34\x72\xfc\x7f\x70\xf5\xcb\xa1\x88\x6d\xd5\x35\xef\xfb\x62\x0f\xf5\x6d\xef\x12\x60\x29\xec\x6c\xae\x92\x71\x6d\x87\xe1\x52\x1a\x0c\x21\x57\x85\x58\x28\xc4\xc6\xba\x85\xeb\x15\x74\xa3\x57\x85\x5d\x51\xb1\xa8\x7e\x50\x0d\xaf\x4a\xda\x75\xb3\x9a\xc2\xfb\x89\x0e\xd0\x5f\x9f\x2c\xe9\x03\x0f\xf9\x93\x16\xc0\x15\x58\x32\xdc\xc6\xa4\x7b\xee\xfe\x09\x00\x00\xff\xff\xef\x20\x57\x8a\xfe\x06\x00\x00")

func templatesReportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesReportHtml,
		"templates/report.html",
	)
}

func templatesReportHtml() (*asset, error) {
	bytes, err := templatesReportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/report.html", size: 1790, mode: os.FileMode(420), modTime: time.Unix(1555429910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":  templatesIndexHtml,
	"templates/report.html": templatesReportHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"index.html":  {templatesIndexHtml, map[string]*bintree{}},
		"report.html": {templatesReportHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
